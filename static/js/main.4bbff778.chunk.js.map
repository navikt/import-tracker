{"version":3,"sources":["components/AccordionList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImportTable","imports","defaultImports","files","useContext","AppContext","setFileLinks","setModalOpen","handleModal","console","log","Object","keys","length","className","Button","onClick","namedLinks","values","reduce","x","y","repos","defaultLinks","uniq","filter","includes","map","k","name","value","sort","a","b","uses","AccordionList","imp","Accordion","heading","style","display","justifyContent","renderContentWhenClosed","namedUses","defaultUses","fileSource","createContext","App","useState","dataRoot","setDataRoot","fileLinks","modalOpen","useEffect","fetch","headers","Accept","then","data","json","parsed","key","startsWith","Provider","Modal","open","onClose","split","Link","target","href","slice","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bbff778.chunk.js","sourcesContent":["import { Accordion, Button } from \"@navikt/ds-react\";\nimport uniq from \"lodash.sorteduniq\";\nimport React, { Fragment, useContext } from \"react\";\nimport { AppContext, packageUsesT } from \"../App\";\nimport \"../app.css\";\n\nconst ImportTable = ({\n  imports,\n  defaultImports,\n  files,\n}: {\n  imports: { [key: string]: { uses: number; repos: string[] } };\n  defaultImports: number;\n  files: string[];\n}) => {\n  const { setFileLinks, setModalOpen } = useContext(AppContext);\n\n  const handleModal = (files: string[]) => {\n    console.log(files);\n    setFileLinks(files);\n    setModalOpen(true);\n  };\n\n  if (Object.keys(imports).length === 0 && defaultImports === 0) {\n    return (\n      <div className=\"button__flex\">\n        Importeres bare direkte, eks: `import \"@navikt/ds-css\"`\n        <Button onClick={() => handleModal(files)}>Se filer</Button>\n      </div>\n    );\n  }\n\n  const namedLinks = Object.values(imports).reduce(\n    (x, y) => [...x, ...y.repos],\n    [] as string[]\n  );\n\n  const defaultLinks = uniq(files.filter((x) => !namedLinks.includes(x)));\n\n  console.log(defaultLinks);\n\n  return (\n    <>\n      <table className=\"tabell tabell--stripet\">\n        <thead>\n          <tr>\n            <th>Funksjon/klasse</th>\n            <th>Importert X ganger</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Default</td>\n            <td className=\"button__flex\">\n              {defaultImports}\n              <Button onClick={() => handleModal(defaultLinks)}>\n                Se filer\n              </Button>\n            </td>\n          </tr>\n          {Object.keys(imports)\n            .map((k) => {\n              return { name: k, value: imports[k] };\n            })\n            .sort((a, b) => (a.value.uses < b.value.uses ? 1 : -1))\n            .map((x, y) => {\n              return (\n                <Fragment key={x.name + y}>\n                  {x.name === \"*\" ? (\n                    <tr>\n                      <td>import default as alias</td>\n                      <td>{x.value}</td>\n                    </tr>\n                  ) : (\n                    <tr>\n                      <td>{x.name}</td>\n                      <td className=\"button__flex\">\n                        {x.value.uses}\n                        <Button onClick={() => handleModal(x.value.repos)}>\n                          Se filer\n                        </Button>\n                      </td>\n                    </tr>\n                  )}\n                </Fragment>\n              );\n            })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst AccordionList = ({\n  imp,\n}: {\n  imp: {\n    name: string;\n    value: packageUsesT;\n  };\n}) => {\n  return (\n    <Accordion\n      className=\"accordion filter drop-shadow-lg\"\n      heading={\n        <span style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <span>{imp.name}</span>\n          <span>{imp.value.uses}</span>\n        </span>\n      }\n      key={imp.name}\n      renderContentWhenClosed={false}\n    >\n      <div className=\"max-h-80 overflow-auto\">\n        <ImportTable\n          key={imp.name + imp.name}\n          imports={imp.value.namedUses}\n          defaultImports={imp.value.defaultUses}\n          files={imp.value.fileSource}\n        />\n      </div>\n    </Accordion>\n  );\n};\n\nexport default AccordionList;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport \"./app.css\";\nimport \"nav-frontend-tabell-style\";\nimport AccordionList from \"./components/AccordionList\";\nimport { Element } from \"nav-frontend-typografi\";\nimport { Link, Modal } from \"@navikt/ds-react\";\n\nexport type packageUsesT = {\n  uses: number;\n  defaultUses: number;\n  namedUses: { [key: string]: { uses: number; repos: string[] } };\n  fileSource: string[];\n};\n\nexport const AppContext = createContext<any>(null);\n\nconst App = () => {\n  const [dataRoot, setDataRoot] = useState<any[]>([]);\n  const [fileLinks, setFileLinks] = useState<string[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    fetch(\"imports.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((data: Response) => data.json())\n      .then((data: any) => {\n        const parsed = Object.keys(data)\n          .map((key) => {\n            return { name: key, value: data[key] as packageUsesT };\n          })\n          .sort((x, y) => (x.value.uses < y.value.uses ? 1 : -1));\n        setDataRoot(parsed.filter((x) => x.name.startsWith(\"@navikt/ds-\")));\n      });\n  }, []);\n\n  /* console.log(dataRoot); */\n  return (\n    <div className=\"flex justify-center vw-100 typo-normal overflow-x-hidden\">\n      <div className=\"p-8 max-w-screen-md w-full\">\n        <span className=\"flex justify-between p-4 \">\n          <Element>Pakkenavn</Element>\n          <Element className=\"mx-4\">Imports</Element>\n        </span>\n        <AppContext.Provider value={{ setFileLinks, setModalOpen }}>\n          {dataRoot.map((imp) => (\n            <AccordionList key={imp.name} imp={imp} />\n          ))}\n        </AppContext.Provider>\n      </div>\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)}>\n        <h2>Linker til filer som bruker komponent: </h2>\n        {fileLinks.length === 0 && (\n          <div>Klarte ikke finne lenke til bruk...</div>\n        )}\n        {fileLinks.map((x) => {\n          const split = x.split(\"/\");\n\n          return (\n            <div key={x}>\n              <Link\n                target=\"_blank\"\n                href={`https://github.com/navikt/${\n                  split[0]\n                }/blob/master/${split.slice(1).join(\"/\")}`}\n              >\n                {x}\n              </Link>\n            </div>\n          );\n        })}\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@navikt/ds-css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}